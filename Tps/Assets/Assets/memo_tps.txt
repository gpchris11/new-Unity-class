memo_tps.txt

import
	외부의 파일 자원을 유니티로 가져와 '애셋'화하는 동작

Asset
	유니티가 사용하는 게임 자원resource


Scene Graph 장면 그래프
	3디 상의 게임오브젝트들을 담고 있는 '자료구조'

변환 Transform
:자기자신으로 사상


렌더링 Rendering
: 3D공간상에 정점 단위의 데이터를
2D공간상에 픽셀 단위의 데이터를 이미지화시켜(프레임 이미지) 표시하는 것

렌더링 파이프라인 Rendering Pipeline
렌더링의 일련의 공정들의 집합


일반적인 렌더링 파이프라인의 구조
==========================================================================================
응용프로그램 단계								기하 단계																		래스터라이즈 단계
==========================================================================================
응용프로그램이									월드변환					(카메라변환)뷰변환				투영변환			
그래픽 처리가 필요한								이동 변환					이동 변환
데이터와 명령문을									회전 변환					회전 변환
조직화하여												비례 변환
그래픽 처리 장치로 
넘기는 작업
==========================================================================================

CPU, SystemRAM											GPU, VideoRAM

														정점 데이터를 다룬다.															픽셀 데이터를 다룬다.
														연속적인 공간을 다룬다.														불연속적인 공간을 다룬다.



셰이딩 Shading: 픽셀의 최종 색상을 결정한다. ( 픽셀의 최종 색상 = f(물체의 색상, 텍스쳐, 조명))

Material 재질: How to Shading. 어떻게 셰이딩할지에 대한 '데이터'와 '방법'을 담은 개념
Shader 셰이더: 셰이딩하는 작은 조각프로그램




유니티 에서 길이 단위는 1Unit을 쓴다.
유니티의 1Unit은 실제 세계의 1m에 대응된다.
유니티의 무게 단위는 1이 1kg에 대응된다.

ridgibody 에 
	Force계열:			물리법칙을 따른다. 즉, 주어진 힘을 1초 동안 가한다.
	Impulse계열:		주어진 힘을 1frame에 가한다.

게임 프로그램의 가장 핵심적인 구조는 game loop이다.


삼각형Triangle
: 3개의 정점vertex으로 이루어진 도형이다.

3D 그래픽스에서는 
삼각형을 기본단위로 사용한다.

삼각형들을 모아서 임의의 입체도형(폴리곤 polygon)을 만든다.


메쉬Mesh
<--삼각형들의 집합( 정점들의 집합 )


this: '객체' 자기자신을 가리키는 참조 변수. 암묵적으로 선언되어 있다. 생략 가능하다. 



//변수의 선언과 초기화
int tA = 3;
//정수를 값으로 가지는 변수

int* tpA = nullptr;
//주소를 값으로 가지는 변수

class CSlime
{
	int mA = 0;

	void Doit();
}//사용자 정의 타입

CSlime tSlime;//객체



벡터의 회전rotation이란? 
크기는 그대로이고 방향이 바뀌는 것

=======================================================


0_tps_followCam_0
	:간단한 3rd Person Shootor 카메라 시점과 이동을 만들어보자.

	캐릭터는 이동하고 
	카메라는 따라간다.

	캐릭터 이동
		Rotate
		Translate


	카메라 워크

	instPChar_Simple: 가장 간단한 카메라 워크 구현은 
				플레이어블 캐릭터에 계층구조 상 하위 오브젝트로 카메라를 두고
				자신이 원하는 시점으로 조정해두는 것이다.


	스크립트를 이용한 TPS카메라워크
		LateUpdate<--렌더링된 결과를 담기 위해 이 위치에 코드
		Transform.LookAt <-- 뷰좌표계의 기저basis의 회전에 관한 것이다.

		Lerp을 이용한 DampTrace 추적 감쇠 <-- 지연 카메라




		
직선의 방정식, 일차 함수의 표준형
y = ax + b

게임 프로그래밍에서는 위의 직선의 방정식보다는 
'직선의 벡터 방정식'을 더 자주 사용한다.

P = P0 + (P1 - P0)*t


다음은 벡터와 매개변수로 나타낸 선형보간 식이다.
P = (1-t)*P0 + t*P1
	


0_tps_followCam_1
	:비교적 좀더 복잡한 3rd Person Shootor 카메라 시점과 이동을 만들어보자.

	캐릭터는 이동하고 
	카메라는 따라간다.

	가) 캐릭터 이동
		CharacterController 컴포넌트


		오일러 수치 해석에 의한 이동 코드를 이해해야 해당 컴포넌트를 이용 가능하다.
			속도 = 거리의 변화량 / 시간의 변화량
			V = delta S / deltaT
				= (S[n] - S[n-1]) / deltaT

			V*deltaT = S[n] - S[n-1]

			S[n]  = S[n-1] + V*deltaT


			가속도 = 속도의 변화량 / 시간의 변화량
			A = delta V / deltaT
				= (V[n] - V[n-1]) / deltaT

			V*deltaT = V[n] - V[n-1]

			V[n]  = V[n-1] + A*deltaT



			캐릭터 컨트롤러는 
			Rigidbody물리를 활용하지 않는 캐릭터를 만들 때 사용한다.

			Slope Limit: 올라갈 수 있는 경사 한계 설정
			Step Offset: 계단으로 취급할 수 있는 높이 한계 설정
			Skin Width: 두 콜라이더가 서로 스킨 너비만큼 관통 가능
			<-- 이를테면 두 캐릭터가 이동하거나 할 때 서로 부딫히면 이 정도 허용오차는 주어 서로 끼는 현상을 방지하기 위한 옵션이다.

			지터링 Jittering
			: 물결치듯 불안정하게 떨리는 현상

			다음은 매뉴얼에서 권장하는 수치이다.
			<--이를 기준으로 조정하여 사용하면 되겠다.

			신장: 2unit(2m)
			보폭: 0.1~0.4unit
			Slope Limit: 90degree
			Skin Width: 최소 0.01초과, Radius의 10%보다 크게
			Min Move Distance: 0




			transform.TransformDirection
			'로컬 좌표계 공간' 에서 '월드 좌표계 공간' 으로 direction을 변환 하는 함수이다.


		나) 카메라

			i) vector = Quaternion*vector
			
			

quaternion


복소수는 다음과 같이 표기한다.( 대수적인 표현 )

a + bi
실수부 + 허수부

	복소수*복소수 는 대수적으로 풀이하면 
	2차원 평면에서 임의의 위치의 회전이 된다.

라는 사실을 보고 해밀턴 수학자는 이런 생각을 했다.
	3차원 공간에서 임의의 위치의 회전이 되는 
	'수'는 없을까?

	그래서 만들어낸 것이 항 4개로 표현하는 사원수Quaternion 이다.
	그리고 이것은 
	3차원 공간에서의 임의의 위치의 회전( 벡터 포함 ) 을 대수적으로 표현한다.
		



degree
: 한바퀴를 360등분한 것중에 하나를 1도라고 한 것
측정치
수학의 개념은 아니다

radian
: 바지름이 R인 원의 R만큼의 호의 길이를 1라디안이라고 한다.
이것은 원의 개념으로부터 나온 것이므로 수학적 개념이다.
(실수 연산에 통합된다)
<-- 그러므로, 수학함수나 게임엔진에서는 내부적으로 radian 각도개념을 사용한다.

	몇가지 회전의 종류를 비교해보자.
	1) 유니티 에디터 상에서 zxy순서로 90,90,90도 회전시키고 결과를 보자 <--- 오일러 각에 의한 회전
	2) 사원수의 *연산자로 사원수 연산 적용 결과를 살펴보자 <--- 사원수에 의한 회전
	3) Transform.Rotate 결과를 살펴보자 <--- 사원수에 의한 회전
	4) Quaternion에서 제공하는 Euler 함수를 적용 결과를 살펴보자 <--- 오일러 각에 의한 회전
	5) 직접 회전행렬을 만들어 정점들에 적용, 결과를 보자. <--- 오일러 각에 의한 회전


	사원수의 곱셈이 3차원 공간에서
	임의의 벡터의 회전을 나타내는 이유

	벡터의 회전이랑
	크기는 그대로이고 방향이 변경되는 것을 말한다.

	임의의 벡터를 사원수에 곱셈하여
	임의의 회전된 벡터를 얻는 식 은 다음과 같다.


	2_thread_vs_coroutine

		프로세스 Process: 프로그램 실행의 흐름
		스레드 Thread: 실행 흐름의 최소 단위

		프로세스는 N개(1개 이상)의 스레드로 이루어진다.

		스레드 1개에 프로세스 1개 ---> 싱글 스레드 프로그램(유니티)
		스레드 N개에(2개 이상) 프로세스 1개 ---> 멀티 스레드 프로그램(서버)

		멀티스레드 프로그램의 목적:
		단위시간 당 병렬 처리를 통해 더 많은 연산을 하려는 것이 목적이다.


	c#에서 제공되는 코루틴Coroutine은 병렬 처리를 흉내내기 위해 만들어진 개념이다.
	다만,
	코루틴은 실제로 병렬 처리되는 것은 아니다.
	코드만 그런 형태를 취한다